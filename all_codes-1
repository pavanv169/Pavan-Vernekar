module final(d_1,d_2,d,x_1,x_2,y);
input [7:0]d_1,d_2,d,x_1,x_2;
output [7:0]y;
wire [3:0]atpkd1,atpkd2,atpkdiff;
wire [7:0]xdiff,d1,out,x1,x2;
wire [7:0]d_1,d_2,d,x_1,x_2;
comp z1(d_1,d_2,d1);

comp z2(x_1,x_2,x1);

subtract u0(x_1,x_2,xdiff);

atpk u1(d,atpkd);

atpk u2(d1,atpkd1);

subtract u3(atpkd,atpkd1,atpkdiff);

shift u4(xdiff,atpkdiff,out);

ripplemod u5(x1,out,cin,y);
endmodule




module finalp(d_1,d_2,d,x_1,x_2,y);
input [7:0]d_1,d_2,d,x_1,x_2;
wire cin;
wire cout;
output [7:0]y;
wire [3:0]atpkd1,atpkd,atpkdiff;
wire [7:0]xdiff,d1,out,x1,x2;
wire [7:0]d_1,d_2,d,x_1,x_2;
assign cin=1'b0;
comp z1(d_1,d_2,d1);

comp z2(x_1,x_2,x1);

subtract u0(x_1,x_2,xdiff);

atpkp u1(d,atpkd);

atpkp u2(d1,atpkd1);

subtract4 u3(atpkd,atpkd1,atpkdiff);

shift u4(xdiff,atpkdiff,out);

ripplemod u5(x1,out,cin,y,cout);
endmodule



module ripplemod(a,b,cin,sum,cout);
input [07:0] a;
input [07:0] b;
input cin;
output [7:0]sum;
output cout;
wire[6:0] c;
fulladd a1(a[0],b[0],cin,sum[0],c[0]);
fulladd a2(a[1],b[1],c[0],sum[1],c[1]);
fulladd a3(a[2],b[2],c[1],sum[2],c[2]);
fulladd a4(a[3],b[3],c[2],sum[3],c[3]);
fulladd a5(a[4],b[4],c[3],sum[4],c[4]);
fulladd a6(a[5],b[5],c[4],sum[5],c[5]);
fulladd a7(a[6],b[6],c[5],sum[6],c[6]);
fulladd a8(a[7],b[7],c[6],sum[7],cout);
endmodule
 
module fulladd(a,b,cin,sum,cout);
input a;
input b;
input cin;
output sum;
output cout;
assign sum=(a^b^cin);
assign cout=((a&b)|(b&cin)|(a&cin));
endmodule




module atpk(d,est);
input [7:0] d ;
output [3:0] est;
wire [0:8] atpklc;
reg [3:0] est;
atpk_loc U0(atpklc,d);
always@(atpklc)
begin

if(atpklc[0]) est <= 4'b0000;
else if(atpklc[1]) est <= 4'b0001;
else if(atpklc[2]) est <= 4'b0010;
else if(atpklc[3]) est <= 4'b0011;
else if(atpklc[4]) est <= 4'b0100;
else if(atpklc[5]) est <= 4'b0101;
else if(atpklc[6]) est <= 4'b0110;
else if(atpklc[7]) est <= 4'b0111;
else if(atpklc[8]) est <= 4'b1000;
else est <= 4'b0000;
end 
endmodule
module atpk_loc(atpklc,d);
output [0:8] atpklc;
input [7:0] d ;
assign atpklc[0]=(~d[7])&(~d[6])&(~d[5])&(~d[4])&(~d[3])&(~d[2])&(~d[1])&((~d[0])|(d[0]));
assign atpklc[1]=(~d[7])&(~d[6])&(~d[5])&(~d[4])&(~d[3])&(~d[2])&(d[1])&(~d[0]);
assign atpklc[2]=(~d[7])&(~d[6])&(~d[5])&(~d[4])&(~d[3])&(((~d[2])&(d[1])&(d[0]))|((d[2])&(~d[1])));
assign atpklc[3]=(~d[7])&(~d[6])&(~d[5])&(~d[4])&(((~d[3])&(d[2])&(d[1]))|((d[3])&(~d[2])));
assign atpklc[4]=(~d[7])&(~d[6])&(~d[5])&(((~d[4])&(d[3])&(d[2]))|((d[4])&(~d[3])));
assign atpklc[5]=(~d[7])&(~d[6])&(((~d[5])&(d[4])&(d[3]))|((d[5])&(~d[4])));
assign atpklc[6]=(~d[7])&(((~d[6])&(d[5])&(d[4]))|((d[6])&(~d[5])));
assign atpklc[7]=(((~d[7])&(d[6])&(d[5]))|((d[7])&(~d[6])));
assign atpklc[8]=((d[7])&(d[6]))|(~d[7]);
endmodule



module comp(a,b,z);
    input [7:0]a,b;
    output [7:0]z;
    reg [7:0]z;
    always@(a,b)
    begin
    if(a>b)
    z=b;
    else
    z=a;
    end
    endmodule



module mux(a, b, sel, z);
    input a, b, sel;
    output z;
    assign z = sel? a:b;
   
endmodule



module shift(in,dist,out);
input [7:0]in;
input [7:0]dist;
output [7:0]out;
reg [7:0]out;
always@(dist)
begin
out <= in>>dist;
end
endmodule



    module subtract (a,b,dif);
    input [7:0]a,b;
    output [7:0]dif;
    reg [7:0]dif;
    always@(a,b)
    begin
    if(a>b)
    dif=a-b;
    else
    dif=b-a;
    end
    
    endmodule


module atpkp(d_in,d_out);

   
   input [7:0] d_in ;
   output [3:0] d_out;

assign d_out = ((d_in[7] ==1'b1 )&&(d_in[6] ==1'b1 )) ? 4'b1000:
               ((d_in[7] ==1'b1 )&&(d_in[6] ==1'b0 )) ? 4'b0111:
               ((d_in[6] ==1'b1 )&&(d_in[5] ==1'b1 )) ? 4'b0111:
               ((d_in[6] ==1'b1 )&&(d_in[5] ==1'b0 )) ? 4'b0110:
               ((d_in[5] ==1'b1 )&&(d_in[4] ==1'b1 )) ? 4'b0110:
               ((d_in[5] ==1'b1 )&&(d_in[4] ==1'b0 )) ? 4'b0101:
               ((d_in[4] ==1'b1 )&&(d_in[3] ==1'b1 )) ? 4'b0101:
               ((d_in[4] ==1'b1 )&&(d_in[3] ==1'b0 )) ? 4'b0100:
	       ((d_in[3] ==1'b1 )&&(d_in[2] ==1'b1 )) ? 4'b0100:
               ((d_in[3] ==1'b1 )&&(d_in[2] ==1'b0 )) ? 4'b0011:
               (d_in[2] ==1'b1) ? 4'b0010:
               (d_in[1] ==1'b1) ? 4'b0000:
               (d_in[0] ==1'b1) ? 4'b0000: 3'bxxx;

endmodule



